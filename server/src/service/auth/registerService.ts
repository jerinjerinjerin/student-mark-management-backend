import bcrypt from "bcrypt";
import jwt from 'jsonwebtoken';
import Register from "../../models/auth/registerModel";

interface User {
  name: string;
  email: string;
  password: string;
  id?: number;  // id will be generated by the database automatically
}

const secrectKey =process.env.JWT_SECRECTKEY || 'jerin';
console.log('JWT_SECRECTKEY', secrectKey)

export const registerUser = async (user: User) => {
    try {
      if (!user.email || !user.password || !user.name) {
        throw new Error("Email, password, and name are required.");
      }
  
      const alreadyUser = await Register.findOne({
        where: {
          email: user.email,
        },
      });
  
      if (alreadyUser) {
        // Return a more specific error if the user already exists
        throw new Error(`User with email ${user.email} already exists`);
      }
  
      const saltRounds = 10;
      const hashPassword = await bcrypt.hash(user.password, saltRounds);
  
      // Now we create the new user
      const newUser = await Register.create({
        name: user.name,
        email: user.email,
        password: hashPassword,
      });
  
      const token = jwt.sign({ userId: newUser.id }, secrectKey, { expiresIn: '1h' });
      
  
      return { newUser, token };
    } catch (error) {
      console.error("Error during user registration:", error);
      throw new Error("An error occurred while registering the user.");
    }
  };
  